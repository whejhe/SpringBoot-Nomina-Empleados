EmpleadoRepository

void actualizarEmpleado(String nombre, String dni, String sexo, Integer categoria, Integer anyosTrabajados);


EmpleadoModel

@Entity
public class EmpleadoModel {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    @Column(nullable = false,length = 60)
    private String nombre;
    @Column(nullable = false,length = 60)
    private String dni;
    @Column(nullable = false,length = 1)
    private String sexo;
    @Column(nullable = false)
    private int categoria;
    @Column(nullable = false)
    private int anyosTrabajados;
    private int sueldo;


EmpleadoController

@PostMapping("/actualizar")
    public String actualizarEmpleado(@ModelAttribute EmpleadoModel empleado, Model model) {
        try {
            empleadoService.actualizarEmpleado(empleado);
            return "redirect:/empleados";
        } catch (Exception e) {
            model.addAttribute("error", "Error al actualizar empleado: " + e.getMessage());
            return "empleados/formularioEditar";
        }
    }

 @GetMapping({ "/editarEmpleado", "/crear" })
    public String mostrarFormularioEditar(int empleadoId,Model model) {
    	EmpleadoModel empleado = empleadoService.obtenerPorId(empleadoId);
        model.addAttribute("empleado", empleado);
        return "empleados/editarEmpleado";
    }

EmpleadoService

public void actualizarEmpleado(EmpleadoModel empleado) {
        EmpleadoModel e = new EmpleadoModel();
        e.setNombre(e.getNombre());
        e.setDni(e.getDni());
        e.setSexo(e.getSexo());
        e.setCategoria(e.getCategoria());
        e.setAnyosTrabajados(e.getAnyosTrabajados());
        
        empleadoRepository.save(e);
    }
